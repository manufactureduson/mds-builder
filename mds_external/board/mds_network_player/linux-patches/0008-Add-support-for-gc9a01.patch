From e6cbe3db5274330bc147662c6f0a7f848ac7baee Mon Sep 17 00:00:00 2001
From: Nicolas Aguirre <aguirre.nicolas@gmail.com>
Date: Tue, 28 May 2024 21:36:33 +0000
Subject: [PATCH 8/8] Add support for gc9a01

---
 drivers/gpu/drm/tiny/Kconfig  |  11 ++
 drivers/gpu/drm/tiny/Makefile |   1 +
 drivers/gpu/drm/tiny/gc9a01.c | 285 ++++++++++++++++++++++++++++++++++
 3 files changed, 297 insertions(+)
 create mode 100644 drivers/gpu/drm/tiny/gc9a01.c

diff --git a/drivers/gpu/drm/tiny/Kconfig b/drivers/gpu/drm/tiny/Kconfig
index f6889f649..6b155dcdd 100644
--- a/drivers/gpu/drm/tiny/Kconfig
+++ b/drivers/gpu/drm/tiny/Kconfig
@@ -42,6 +42,17 @@ config DRM_CIRRUS_QEMU
 	   - qxl (DRM_QXL, qemu -vga qxl, works best with spice)
 	   - virtio (DRM_VIRTIO_GPU), qemu -vga virtio)
 
+config TINYDRM_GC9A01
+	tristate "DRM support for GC9A01"
+	depends on DRM && SPI
+	select DRM_KMS_HELPER
+	select DRM_GEM_DMA_HELPER
+	select DRM_MIPI_DBI
+	select BACKLIGHT_CLASS_DEVICE
+	help
+	  DRM driver for the GC9A01 display panel
+	  If M is selected the module will be called gc9a01.
+
 config DRM_GM12U320
 	tristate "GM12U320 driver for USB projectors"
 	depends on DRM && USB && MMU
diff --git a/drivers/gpu/drm/tiny/Makefile b/drivers/gpu/drm/tiny/Makefile
index 76dde89a0..9dc1c0b90 100644
--- a/drivers/gpu/drm/tiny/Makefile
+++ b/drivers/gpu/drm/tiny/Makefile
@@ -7,6 +7,7 @@ obj-$(CONFIG_DRM_GM12U320)		+= gm12u320.o
 obj-$(CONFIG_DRM_OFDRM)			+= ofdrm.o
 obj-$(CONFIG_DRM_PANEL_MIPI_DBI)	+= panel-mipi-dbi.o
 obj-$(CONFIG_DRM_SIMPLEDRM)		+= simpledrm.o
+obj-$(CONFIG_TINYDRM_GC9A01)		+= gc9a01.o
 obj-$(CONFIG_TINYDRM_HX8357D)		+= hx8357d.o
 obj-$(CONFIG_TINYDRM_ILI9163)		+= ili9163.o
 obj-$(CONFIG_TINYDRM_ILI9225)		+= ili9225.o
diff --git a/drivers/gpu/drm/tiny/gc9a01.c b/drivers/gpu/drm/tiny/gc9a01.c
new file mode 100644
index 000000000..569cfc370
--- /dev/null
+++ b/drivers/gpu/drm/tiny/gc9a01.c
@@ -0,0 +1,285 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * DRM driver for gc9a01 panels
+ *
+ * Copyright 2024 Nicolas Aguirre
+ */
+
+#include <linux/backlight.h>
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/property.h>
+#include <linux/regulator/consumer.h>
+#include <linux/spi/spi.h>
+
+#include <drm/drm_atomic_helper.h>
+#include <drm/drm_drv.h>
+#include <drm/drm_fbdev_generic.h>
+#include <drm/drm_gem_atomic_helper.h>
+#include <drm/drm_gem_dma_helper.h>
+#include <drm/drm_managed.h>
+#include <drm/drm_mipi_dbi.h>
+#include <drm/drm_modeset_helper.h>
+#include <video/mipi_display.h>
+
+#define ILI9341_MADCTL_BGR	BIT(3)
+#define ILI9341_MADCTL_MV	BIT(5)
+#define ILI9341_MADCTL_MX	BIT(6)
+#define ILI9341_MADCTL_MY	BIT(7)
+
+void LCD_1IN28_SetWindows(struct mipi_dbi *dbi, u32 Xstart, u32 Ystart, u32 Xend, u32 Yend)
+{
+	mipi_dbi_command(dbi, 0x2A, 0x00, Xstart, (Xend-1)>>8, Xend-1);
+	mipi_dbi_command(dbi, 0x2B, 0x00, Ystart, (Yend-1)>>8, Yend-1);
+	mipi_dbi_command(dbi, 0x2C);
+}
+
+static void gc9a01_enable(struct drm_simple_display_pipe *pipe,
+			    struct drm_crtc_state *crtc_state,
+			    struct drm_plane_state *plane_state)
+{
+	struct mipi_dbi_dev *dbidev = drm_to_mipi_dbi_dev(pipe->crtc.dev);
+	struct mipi_dbi *dbi = &dbidev->dbi;
+	int ret, idx;
+	u8 addr_mode;
+
+	printk(KERN_INFO "gc9a01_enable\n");
+
+	if (!drm_dev_enter(pipe->crtc.dev, &idx))
+		return;
+
+	ret = mipi_dbi_poweron_conditional_reset(dbidev);
+	if (ret < 0)
+		goto out_exit;
+	if (ret == 1)
+		goto out_enable;
+
+	printk(KERN_INFO "gc9a01 reset\n");
+
+
+
+	// mipi_dbi_command(dbi, MIPI_DCS_EXIT_SLEEP_MODE);// Exit sleep
+	// mdelay(120);
+	mipi_dbi_command(dbi, 0xEF);
+	mipi_dbi_command(dbi, 0xEB, 0x14);
+	mipi_dbi_command(dbi, 0xFE, 0xEF);
+	mipi_dbi_command(dbi, 0xEB, 0x14);
+	mipi_dbi_command(dbi, 0x84, 0x40);
+  	mipi_dbi_command(dbi, 0x85, 0xFF);
+  	mipi_dbi_command(dbi, 0x86, 0xFF);
+  	mipi_dbi_command(dbi, 0x87, 0xFF);
+  	mipi_dbi_command(dbi, 0x88, 0x0A);
+  	mipi_dbi_command(dbi, 0x89, 0x21);
+  	mipi_dbi_command(dbi, 0x8A, 0x00);
+  	mipi_dbi_command(dbi, 0x8B, 0x80);
+  	mipi_dbi_command(dbi, 0x8C, 0x01);
+  	mipi_dbi_command(dbi, 0x8D, 0x01);
+  	mipi_dbi_command(dbi, 0x8E, 0xFF);
+  	mipi_dbi_command(dbi, 0x8F, 0xFF);
+  	mipi_dbi_command(dbi, 0xB6, 0x00, 0x20);
+
+  	mipi_dbi_command(dbi, MIPI_DCS_SET_ADDRESS_MODE, 0x18);
+  	mipi_dbi_command(dbi, MIPI_DCS_SET_PIXEL_FORMAT, 0x55);
+  	
+	mipi_dbi_command(dbi, 0x90, 0x08, 0x08, 0x08, 0x08);
+  	mipi_dbi_command(dbi, 0xBD, 0x06);
+	mipi_dbi_command(dbi, 0xBC, 0x00);
+	mipi_dbi_command(dbi, 0xFF, 0x60, 0x01, 0x04);
+  	mipi_dbi_command(dbi, 0xC3, 0x13);
+  	mipi_dbi_command(dbi, 0xC4, 0x13);
+  	mipi_dbi_command(dbi, 0xC9, 0x22);
+  	mipi_dbi_command(dbi, 0xBE, 0x11);
+  	mipi_dbi_command(dbi, 0xE1, 0x10, 0x0E);
+  	mipi_dbi_command(dbi, 0xDF, 0x21, 0x0c, 0x02);
+	mipi_dbi_command(dbi, 0xF0, 0x45, 0x09, 0x08, 0x08, 0x26, 0x2A);
+	mipi_dbi_command(dbi, 0xF1, 0x43, 0x70, 0x72, 0x36, 0x37, 0x6F);
+  	mipi_dbi_command(dbi, 0xF2, 0x45, 0x09, 0x08, 0x08, 0x26, 0x2A);
+  	mipi_dbi_command(dbi, 0xF3, 0x43, 0x70, 0x72, 0x36, 0x37, 0x6F);
+  	mipi_dbi_command(dbi, 0xED, 0x1B, 0x0B);
+  	mipi_dbi_command(dbi, 0xAE, 0x77);
+  	mipi_dbi_command(dbi, 0xCD, 0x63);
+	mipi_dbi_command(dbi, 0x70, 0x07, 0x07, 0x04, 0x0E, 0x0F, 0x09, 0x07, 0x08, 0x03);
+	mipi_dbi_command(dbi, 0xE8, 0x34);
+	mipi_dbi_command(dbi, 0x62, 0x18, 0x0D, 0x71, 0xED, 0x70, 0x70, 0x18, 0x0F, 0x71, 0xEF, 0x70, 0x70);
+	mipi_dbi_command(dbi, 0x63, 0x18, 0x11, 0x71, 0xF1, 0x70, 0x70, 0x18, 0x13, 0x71, 0xF3, 0x70, 0x70);
+	mipi_dbi_command(dbi, 0x64, 0x28, 0x29, 0xF1, 0x01, 0xF1, 0x00, 0x07);
+	mipi_dbi_command(dbi, 0x66, 0x3C, 0x00, 0xCD, 0x67, 0x45, 0x45, 0x10, 0x00, 0x00, 0x00);
+	mipi_dbi_command(dbi, 0x67, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x01, 0x54, 0x10, 0x32, 0x98);
+	mipi_dbi_command(dbi, 0x74, 0x10, 0x85, 0x80, 0x00, 0x00, 0x4E, 0x00);
+	mipi_dbi_command(dbi, 0x98, 0x3E, 0x07);
+	mipi_dbi_command(dbi, 0x35, 0x21);
+	mipi_dbi_command(dbi, MIPI_DCS_SET_TEAR_ON);
+	mipi_dbi_command(dbi, MIPI_DCS_ENTER_INVERT_MODE);
+	mipi_dbi_command(dbi, MIPI_DCS_EXIT_SLEEP_MODE);// Exit sleep
+	mdelay(120);
+	mipi_dbi_command(dbi, MIPI_DCS_SET_DISPLAY_ON); // Display on
+	mdelay(120);
+
+out_enable:
+	// switch (dbidev->rotation) {
+	// default:
+	// 	addr_mode = ILI9341_MADCTL_MX;
+	// 	break;
+	// case 90:
+	// 	addr_mode = ILI9341_MADCTL_MV;
+	// 	break;
+	// case 180:
+	// 	addr_mode = ILI9341_MADCTL_MY;
+	// 	break;
+	// case 270:
+	// 	addr_mode = ILI9341_MADCTL_MV | ILI9341_MADCTL_MY |
+	// 		    ILI9341_MADCTL_MX;
+	// 	break;
+	// }
+	// addr_mode |= ILI9341_MADCTL_BGR;
+	// mipi_dbi_command(dbi, MIPI_DCS_SET_ADDRESS_MODE, 0x68);
+	mipi_dbi_command(dbi, MIPI_DCS_SET_ADDRESS_MODE, 0x18);
+
+	// printk(KERN_INFO "addr_mode: %d\n", addr_mode);
+	mipi_dbi_enable_flush(dbidev, crtc_state, plane_state);
+
+
+
+out_exit:
+	drm_dev_exit(idx);
+}
+
+static const struct drm_simple_display_pipe_funcs gc9a01_pipe_funcs = {
+	DRM_MIPI_DBI_SIMPLE_DISPLAY_PIPE_FUNCS(gc9a01_enable),
+};
+
+static const struct drm_display_mode gc9a01_mode = {
+	DRM_SIMPLE_MODE(240, 240, 32, 32),
+};
+
+DEFINE_DRM_GEM_DMA_FOPS(gc9a01_fops);
+
+static const struct drm_driver gc9a01_driver = {
+	.driver_features	= DRIVER_GEM | DRIVER_MODESET | DRIVER_ATOMIC,
+	.fops			= &gc9a01_fops,
+	DRM_GEM_DMA_DRIVER_OPS_VMAP,
+	.debugfs_init		= mipi_dbi_debugfs_init,
+	.name			= "gc9a01",
+	.desc			= "GC9A01",
+	.date			= "20240217",
+	.major			= 1,
+	.minor			= 0,
+};
+
+static const struct of_device_id gc9a01_of_match[] = {
+	{ .compatible = "waveshare,gc9a01" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, gc9a01_of_match);
+
+static const struct spi_device_id gc9a01_id[] = {
+	{ "gc9a01", 0 },
+	{ },
+};
+MODULE_DEVICE_TABLE(spi, gc9a01_id);
+
+static int gc9a01_probe(struct spi_device *spi)
+{
+	struct device *dev = &spi->dev;
+	struct mipi_dbi_dev *dbidev;
+	struct drm_device *drm;
+	struct mipi_dbi *dbi;
+	struct gpio_desc *dc;
+	u32 rotation = 0;
+	int ret;
+
+
+	dbidev = devm_drm_dev_alloc(dev, &gc9a01_driver,
+				    struct mipi_dbi_dev, drm);
+	if (IS_ERR(dbidev))
+		return PTR_ERR(dbidev);
+
+	dbi = &dbidev->dbi;
+	drm = &dbidev->drm;
+
+	dbi->reset = devm_gpiod_get_optional(dev, "reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(dbi->reset))
+		return dev_err_probe(dev, PTR_ERR(dbi->reset), "Failed to get GPIO 'reset'\n");
+
+	dc = devm_gpiod_get_optional(dev, "dc", GPIOD_OUT_LOW);
+	if (IS_ERR(dc))
+		return dev_err_probe(dev, PTR_ERR(dc), "Failed to get GPIO 'dc'\n");
+
+	dbidev->regulator = devm_regulator_get(dev, "power");
+	if (IS_ERR(dbidev->regulator))
+		return PTR_ERR(dbidev->regulator);
+
+	dbidev->backlight = devm_of_find_backlight(dev);
+	if (IS_ERR(dbidev->backlight))
+		return PTR_ERR(dbidev->backlight);
+
+	device_property_read_u32(dev, "rotation", &rotation);
+
+	ret = mipi_dbi_spi_init(spi, dbi, dc);
+	if (ret)
+		return ret;
+
+	ret = mipi_dbi_dev_init(dbidev, &gc9a01_pipe_funcs, &gc9a01_mode, rotation);
+	if (ret)
+		return ret;
+
+	drm_mode_config_reset(drm);
+
+	ret = drm_dev_register(drm, 0);
+	if (ret)
+		return ret;
+
+	spi_set_drvdata(spi, drm);
+
+	drm_fbdev_generic_setup(drm, 0);
+
+	return 0;
+}
+
+static void gc9a01_remove(struct spi_device *spi)
+{
+	struct drm_device *drm = spi_get_drvdata(spi);
+
+	drm_dev_unplug(drm);
+	drm_atomic_helper_shutdown(drm);
+}
+
+static void gc9a01_shutdown(struct spi_device *spi)
+{
+	drm_atomic_helper_shutdown(spi_get_drvdata(spi));
+}
+
+static int __maybe_unused gc9a01_pm_suspend(struct device *dev)
+{
+	return drm_mode_config_helper_suspend(dev_get_drvdata(dev));
+}
+
+static int __maybe_unused gc9a01_pm_resume(struct device *dev)
+{
+	drm_mode_config_helper_resume(dev_get_drvdata(dev));
+
+	return 0;
+}
+
+static const struct dev_pm_ops gc9a01_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(gc9a01_pm_suspend, gc9a01_pm_resume)
+};
+
+static struct spi_driver gc9a01_spi_driver = {
+	.driver = {
+		.name = "gc9a01",
+		.owner = THIS_MODULE,
+		.of_match_table = gc9a01_of_match,
+		.pm = &gc9a01_pm_ops,
+	},
+	.id_table = gc9a01_id,
+	.probe = gc9a01_probe,
+	.remove = gc9a01_remove,
+	.shutdown = gc9a01_shutdown,
+};
+module_spi_driver(gc9a01_spi_driver);
+
+MODULE_DESCRIPTION("Multi-Inno MI0283QT DRM driver");
+MODULE_AUTHOR("Noralf Trønnes");
+MODULE_LICENSE("GPL");
-- 
2.39.2

